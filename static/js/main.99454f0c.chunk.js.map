{"version":3,"sources":["components/Header/Header.js","components/Common/Doughnut.js","utils/active.js","utils/progress.js","components/Common/Progress/Progress.js","components/Overview/Subject.js","components/Overview/Semester.js","components/Overview/Step/Summary.js","components/Overview/Steps/Step.js","components/Overview/Steps/index.js","components/Overview/Step/Header.js","utils/builders.js","seed/engelska.js","seed/swedish.js","utils/persistence.js","store/courses.js","components/Overview/Step/Activites.js","components/Overview/Step/DateSelection.js","components/Overview/Step/index.js","components/Overview/Overview.js","components/News/News.js","components/Menu/Header.js","components/Menu/Dots.js","components/Menu/Subject.js","components/Menu/Menu.js","App.js","serviceWorker.js","store/store.js","store/rootReducer.js","index.js"],"names":["options","label","href","Header","location","this","props","react_default","a","createElement","react","Pane","elevation","map","option","apperance","pathname","Link","key","to","className","Button","appearance","Component","withRouter","Doughnut","p","percentage","react_chartjs_2_es","legend","data","datasets","backgroundColor","hoverBackgroundColor","cutoutPercentage","tooltips","enabled","subtaskIsActive","subTask","selected","taskIsActive","task","_","some","subTasks","stepIsActive","step","tasks","courseIsActive","course","steps","aggregateStats","statColl","reduce","c","_ref","completed","total","getStatsForTasks","active","filter","done","countBy","st","true","left","false","length","getStepProgress","stats","getTotalProgress","courses","s","Progress","_this$props","percent","text","color","rest","Object","objectWithoutProperties","innerText","concat","Card","assign","height","width","overflow","background","marginTop","textAlign","Text","Subject","name","progress","getCourseProgress","currentStep","find","cursor","padding","marginBottom","Strong","number","Progress_Progress_Progress","Math","round","display","i","borderLeft","Semester","totalProgress","Subject_Subject","Doughnut_Doughnut","connect","state","Summary","title","UnorderedList","ListItem","id","Step","subject","Heading","is","alignItems","Summary_Summary","Steps","match","params","Step_Step","Redirect","day","selectedDate","justifyContent","borderBottom","paddingBottom","size","flex","marginLeft","flexDirection","minWidth","maxWidth","maxHeight","minHeight","as","format","stepID","taskID","courseID","subTaskID","createTask","arguments","undefined","createStep","createCourse","save","localStorage","setItem","JSON","stringify","objectSpread","valueOf","serialize","updateIn","collection","value","fn","entity","updateWithIDFn","defineProperty","initalState","getItem","parse","moment","read","engelska","swedish","Activities","selectSubtask","subtaskID","_this","toggleSubtask","_this2","listStyleType","toConsumableArray","listStylePosition","onClick","bind","intent","type","generateDates","memoize","today","range","n","clone","add","DateSelection","setDate","date","toString","_match$params","Step_Header_Header","Step_DateSelection","Activites","Overview","Switch","Route","path","component","IconButton","icon","Array","keys","Dots","remaining","position","marginRight","top","opacity","Avatar","isSolid","showContent","toggleShowContent","setState","completeSubtask","flatten","toUpperCase","Dots_Dots","Pill","iconColor","Menu","activeCourses","Menu_Header","components_Menu_Subject","locale","App","boxSizing","components_Header_Header","margin","components_Menu_Menu","Boolean","window","hostname","initialState","combineReducers","action","updateCourse","x","store","createStore","rootReducer","ReactDOM","render","BrowserRouter","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.99454f0c.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport styles from './Header.css'\n\nimport { Pane, Button } from 'evergreen-ui'\nimport { Link, withRouter } from 'react-router-dom'\n\nconst options = [\n  { label: 'Aktuellt', href: '/' },\n  { label: 'Schema', href: '/a' },\n  { label: 'Terminsplanering', href: '/b' },\n  { label: 'Senaste Bedömningar', href: '/c' },\n  { label: 'Terminsöversikt', href: '/overview' },\n]\n\nclass Header extends Component {\n  render() {\n    const { location } = this.props\n    const matchCurrent = (href) => location.pathname === href\n\n    return (\n      <Fragment>\n        <Pane elevation={1}>\n          {\n            options.map(option => {\n              const current = matchCurrent(option.href)\n              const apperance = current ? \"default\" : \"minimal\"\n\n              return (\n                <Link \n                  key={option.label} \n                  to={option.href} \n                  className=\"header-link\"\n                >\n                  <Button appearance={apperance}>\n                    {option.label}\n                  </Button>\n                </Link>\n              )\n            })\n          }   \n        </Pane>\n      </Fragment>\n    )\n  }\n}\n\nexport default withRouter(Header)","import React, { Component } from 'react'\n\nimport { Doughnut as CDoughnut } from 'react-chartjs-2'\n\nconst data = (p) => ({\n  datasets: [{\n    data: [p, (100 - p)],\n    backgroundColor: [\n      '#45BBA3',\n      '#FFF'\n    ],\n    hoverBackgroundColor: [\n      '#45BBA3',\n      '#FFF'\n    ]\n  }]\n})\n\nexport default class Doughnut extends Component {\n  render() {\n    const { percentage } = this.props\n\n    return (\n      <CDoughnut\n        legend={false}\n        data={data(percentage)}\n        options={{\n          cutoutPercentage: 70,\n          tooltips: {\n            enabled: false,\n          }\n        }}\n      />\n    )\n  }\n}","import _ from 'lodash'\n\nexport const subtaskIsActive = (subTask) => {\n  return subTask.selected\n}\n\nexport const taskIsActive = (task) => {\n  return _.some(task.subTasks, subtaskIsActive)\n}\n\nexport const stepIsActive = (step) => {\n  return _.some(step.tasks, taskIsActive)\n}\n\nexport const courseIsActive = (course) => {\n  return _.some(course.steps, stepIsActive)\n}","import _ from 'lodash'\nimport { subtaskIsActive, taskIsActive, stepIsActive } from './active'\n\nexport const aggregateStats = (statColl) => {\n  return statColl\n      .reduce((c, { completed, total }) => ({\n        completed: c.completed + completed,\n        total: c.total + total\n      }), { completed: 0, total: 0 })\n}\n\n\nexport const getStatsForTasks = (task) => {\n  const active = task.subTasks.filter(subtaskIsActive)\n  const done = _.countBy(active, st => st.completed)\n\n  return {\n    completed: done.true || 0,\n    left: done.false || 0,\n    total: active.length\n  }\n}\n\nexport const getTaskProgress = (task) => {\n  const { completed, total, left } = getStatsForTasks(task)\n\n  if (left === 0) {\n    if(completed === 0) {\n      return 0\n    }\n    return 100\n  }\n\n  const p = completed / total\n  return 100*p\n}\n\nexport const getStepProgress = (step) => {\n  const { tasks } = step\n  const stats = aggregateStats(tasks.map(getStatsForTasks))\n  if (stats.total === 0) {\n    return 0\n  }\n\n  return 100*stats.completed/stats.total\n}\n\nexport const getCourseProgress = (course) => {\n  const { steps } = course\n  const stats = aggregateStats(steps.map(s => {\n    const substats = aggregateStats(s.tasks.map(getStatsForTasks))\n    return substats\n  }))\n\n  if (stats.total === 0) {\n    return 0\n  }\n\n  return 100*stats.completed/stats.total\n}\n\n\nexport const getTotalProgress = (courses) => {\n  const stats = aggregateStats(courses.map(course => {\n    const { steps } = course\n    const stats = aggregateStats(steps.map(s => {\n      const substats = aggregateStats(s.tasks.map(getStatsForTasks))\n      return substats\n    }))\n    return stats\n  }))\n\n  if (stats.total === 0) {\n    return 0\n  }\n\n  return 100*stats.completed/stats.total\n}","import React, { Component } from 'react'\nimport './Progress.css'\n\nimport { Card, Pane, Text } from 'evergreen-ui'\n\nexport default class Progress extends Component {\n  render() {\n    const { percent, text, color, ...rest } = this.props\n\n    const innerText = text || `${percent} %`\n\n    return (\n      <Card \n        {...rest}\n        height={30} \n        width=\"100%\" \n        backgroundColor=\"#F1F5F4\" \n        overflow=\"hidden\"\n      >\n        <Pane \n          className=\"progress-bar\"\n          height={30} \n          width={`${percent}%`} \n          background={color || \"#3EBCA3\"} \n        />\n        <Pane marginTop={-24} textAlign=\"center\">\n          <Text color=\"black\">{innerText}</Text>\n        </Pane>\n      </Card>\n    )\n  }\n}","import React, { Component } from 'react'\nimport { \n  getCourseProgress, \n  getStepProgress \n} from '../../utils/progress'\n\nimport './Subject.css'\n\nimport { Progress } from '../Common'\nimport { Pane, Card, Text, Strong } from 'evergreen-ui'\nimport _ from 'lodash'\n\nimport { Link } from 'react-router-dom'\n\nexport default class Subject extends Component {\n  render() {\n    const { course } = this.props;\n    const { color, name, steps } = course\n    \n    const progress = getCourseProgress(course)\n    const currentStep = _.find(steps, (s) => getStepProgress(s) !== 100)\n\n    return (\n      <Link to={`/overview/${name}`} className=\"subject-link\">\n        <Pane cursor=\"pointer\" elevation={0} padding={8} marginBottom={16}>\n          <Strong color={color}>{name}</Strong>\n          <Pane>     \n            {!currentStep && <Text>Inget steg påbörjat</Text>}\n            {currentStep && <Text>Steg {currentStep.number}</Text>}\n            <Card overflow=\"hidden\">\n              <Progress color={color} percent={Math.round(progress)} />\n            </Card>\n          </Pane>\n          <Pane>\n            <Text>Termin</Text>\n            <Card display=\"flex\" overflow=\"hidden\">\n            {\n              steps.map((step, i) => {\n                return (\n                  <Progress \n                    key={step.name}\n                    color={color}\n                    percent={getStepProgress(step)} \n                    text={`Steg ${step.number}`}\n                    borderLeft={i !== 0 ? \"2px solid white\" : null}\n                  />\n                )\n              })\n            }\n            </Card>\n          </Pane>\n        </Pane>\n      </Link>\n    )\n  }\n}","import { connect } from 'react-redux'\nimport React, { Component, Fragment } from 'react'\nimport Doughnut from '../Common/Doughnut';\n\nimport { getTotalProgress } from '../../utils/progress'\n\nimport _ from 'lodash'\nimport Subject from './Subject'\nimport { Pane } from 'evergreen-ui'\n\nconst avg = (xs) => _.sum(xs) / xs.length\n\nclass Semester extends Component {\n  render() {\n    const { courses } = this.props;\n\n    const totalProgress = getTotalProgress(courses)\n\n    return (\n      <Fragment>\n        <Pane width=\"50%\">\n          {courses.map(course => (\n            <Subject key={course.name} course={course} />\n          ))}\n        </Pane>\n        <Pane width=\"50%\" textAlign=\"center\">\n          <h1>Termin {Math.round(totalProgress)} %</h1>\n          <Doughnut percentage={totalProgress} />\n        </Pane>\n      </Fragment>\n    )\n  }\n}\n\nexport default connect(state => ({\n  courses: state.courses\n}))(Semester)","import React, { Component } from 'react'\n\nimport { Pane, Strong, UnorderedList, ListItem } from 'evergreen-ui'\n\nexport default class Summary extends Component {\n  render() {\n    const { step } = this.props\n\n    return (\n      <Pane>\n        <Strong>{step.title}</Strong>\n        <UnorderedList>\n          {\n            step.tasks.map(task => (\n              <ListItem key={task.id}>\n                {task.title}\n              </ListItem>\n            ))\n          }\n        </UnorderedList>\n      </Pane>\n    )\n  }\n}","import React, { Component } from 'react'\nimport './Step.css'\n\nimport { getStepProgress } from '../../../utils/progress'\nimport { Link } from 'react-router-dom'\n\nimport { \n  Pane, \n  Heading\n} from 'evergreen-ui'\nimport Doughnut from '../../Common/Doughnut';\nimport Summary from '../Step/Summary';\n\nexport default class Step extends Component {\n  render() {\n    const { subject, step } = this.props\n\n    const { number } = step\n\n    return (\n      <Link to={`/overview/${subject}/${number}`} className=\"step-link\">\n        <Pane elevation={3} padding={8} width=\"100%\" marginTop={16}>\n          <Heading textAlign=\"center\" is=\"h3\">Steg {number}</Heading>\n          <Pane display=\"flex\" alignItems=\"center\">\n            <Pane width=\"25%\">\n              <Doughnut percentage={getStepProgress(step)} />\n            </Pane>\n            <Summary step={step} />\n          </Pane>\n        </Pane>\n      </Link>\n    )\n  }\n}","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { Heading, Pane } from 'evergreen-ui'\nimport { withRouter, Redirect } from 'react-router-dom'\nimport Step from './Step';\n\nimport _ from 'lodash'\n\nconst steps = [\n  { number: 18 }\n]\n\nclass Steps extends Component {\n  render() {\n    const { match, courses } = this.props;\n    const { subject } = match.params\n\n    const course = _.find(courses, c => c.name === subject)\n\n    if (!course) {\n      return <Redirect to=\"/overview\" />\n    }\n\n    return (\n      <Pane width=\"100%\">\n        <Heading is=\"h1\" color=\"#45BBA3\">\n          {course.name}\n        </Heading> \n        {\n          course.steps.map(step => (\n            <Step subject={subject} key={step.number} step={step} />\n          ))\n        }\n      </Pane>\n    )\n  }\n}\n\nexport default withRouter(connect(state => ({\n  courses: state.courses\n}))(Steps))","import React, { Component } from 'react'\nimport Doughnut from '../../Common/Doughnut';\nimport Summary from './Summary';\n\nimport { getStepProgress } from '../../../utils/progress'\nimport { Pane, Card, Heading } from 'evergreen-ui'\n\nexport default class Header extends Component {\n  render() {\n    const { step } = this.props\n    const day = step.selectedDate\n\n    return (\n      <Pane \n        textAlign=\"left\"\n        display=\"flex\" \n        alignItems=\"fill\" \n        width=\"100%\" \n        justifyContent=\"space-between\"\n        borderBottom=\"1px solid rgb(190,190,190)\"\n        paddingBottom={16}\n      >\n        <Pane width=\"25%\" display=\"flex\" alignItems=\"center\">\n          <Doughnut percentage={getStepProgress(step)} />\n        </Pane>\n        <Pane>\n          <Heading textAlign=\"center\" size={400}>Steg {step.number}</Heading>\n          <Summary step={step} />\n        </Pane>\n        {\n          step.selectedDate && (\n            <Card \n              backgroundColor=\"#45BBA3\" \n              flex={1} \n              marginLeft={16} \n              display=\"flex\"\n              flexDirection=\"column\"\n              justifyContent=\"center\"\n              alignItems=\"center\"\n              minWidth={120}\n              maxWidth={120}\n              maxHeight={120}\n              minHeight={120}\n              >\n                <Heading size={900} color=\"white\" as=\"h1\">{day.format('D')}</Heading> \n                <Heading color=\"white\" as=\"h2\">{day.format('MMM')}</Heading> \n            </Card>\n          )\n        }\n      </Pane>\n    )\n  }\n}","let stepID = 0;\nlet taskID = 0;\nlet courseID = 0;\nlet subTaskID = 0;\n\nexport const createTask = (title, subTasks = []) => ({\n  id: taskID++,\n  title,\n  subTasks: subTasks.map(s => ({ \n    id: subTaskID++, \n    text: s,\n    completed: false,\n    selected: false\n  }))\n})\n\nexport const createStep = (number, title, tasks) => ({\n  id: stepID++,\n  number,\n  title,\n  tasks,\n  selectedDate: null\n})\n\nexport const createCourse = (name, color, steps) => {\n  return {\n    id: courseID++,\n    name,\n    color,\n    steps\n  }\n}","import { createCourse, createStep, createTask } from '../utils/builders'\n\nexport default createCourse('Engelska', '#1DAFEB', [\n  createStep(\n    17,\n    'Musik', [\n      createTask('Berätta om olika instrument och musiker', [\n        'Instruments',\n        'Instruments interaktiv',\n        'Verb i presens - pågående form',\n        'Verb i presens - pågående form interaktiv',\n        'Where do they play?',\n        'Where do they play? interaktiv',\n        'Letter of application',\n        'Depeche Mode - The best band in the world'\n      ]),\n      createTask('Ställa och besvara enkla frågor som handlar om musik', [\n        'Do, does or did?',\n        'Do, does or did? interaktiv',\n        'Band interview',\n        'Make questions',\n        'Make questions interaktiv',\n        'Samtalskort - Musik',\n        'Do you like playing the guitar?',\n        'Do you like playing the guitar? interaktiv'\n      ]),\n      createTask('Berätta om några populära musikstilar i engelsktalande länder', [\n        'Useful phrases',\n        'Useful phrases interaktiv',\n        'Indie Pop',\n        'Reggae',\n        'Australian music',\n        'Quiz about music from English-speaking countries',\n        'What does music mean to you?'\n      ])\n    ]\n  ),\n  createStep(\n    18, \n    'Vykort', [\n      createTask('Berätta och skriv om miljöer på olika platser i världen', [\n        'Opposites',\n        'Opposites interaktiv',\n        'Komparera adjektiv',\n        'Komparera adjektiv interaktiv',\n        'Korsord med natur och miljö',\n        'Natural or not',\n        'Natural or not interaktiv',\n        'Ordföljd',\n        'Förläng dina meningar'\n        ]\n        ),\n      createTask('Berätta och skriva om typiska aktiviteter på semestern', [\n        'Perfekt',\n        'Postcard phrases',\n        'Postcard phrases interaktiv',\n        'Läsförståelse - Jersey',\n        'Läsförståelse - Jersey interaktiv',\n        'Ordkunskap - Hotell',\n        'Ordkunskap - Hotell interaktiv',\n        'What can you do?',\n        'What can you do? interaktiv',\n        'Write your own postcard'\n      ]),\n      createTask('Läsa, förstå och skriva vykort från olika platser i världen', [\n       ' Learn about the weather',\n        'What do you know about South Bombay',\n        'Letters from the world'\n      ])\n    ]\n  ),\n  createStep(\n    19,\n    'Läsa Noveller', [\n      createTask('Tillgodogöra dig innehållet i en novell', [\n        'Välj din novell',\n        'Ordinlärningsstrategier'\n        ]),\n        createTask('Skriva en läslogg', [\n          'Obestämd artikel',\n        'Obestämd artikel interaktiv',\n        'Att läsa och skriva'\n      ]),\n      createTask('Återberätta det du har läst och delta i samtal om litteratur med kompisar', [\n        'Dåtid - regelbundna och oregelbundna verb',\n        'Korsord oregelbundna verb i imperfekt',\n        'Gör om berättelsen',\n        'Retell what you have read'\n      ])\n    ]\n  )\n])","import { createCourse, createStep, createTask } from '../utils/builders'\n\nexport default createCourse('Svenska', '#3EC28F', [\n  createStep(26, 'I någonmansland', [\n    createTask('Läsa och diskutera', [\n      'Att vara på flykt',\n      'Lyssna på en podd'\n    ]),\n    createTask('Skriv en gestaltande text', [\n      'Skriv en dikt eller låttext',\n      'Skriv ett brev'\n    ]),\n    createTask('Att övertyga i tal och skrift', [\n      'Läs en skönlitterär bok',\n      'Berätta en historia',\n      'Öva ditt kroppsspråk och att vara övertygande',\n      'Gör en reklamaffisch'\n    ])\n  ]),\n  createStep(27, 'Språkbruk genom tiderna', [\n    createTask('Lär dig om nutida språkbruk.', [\n      'Talet och skriften',\n      'Orden i språket'\n    ]),\n    createTask('Berätta om svensk språkhistoria med hjälp av en digital presentation', [\n      'Svensk språkhistoria',\n      'Diskutera språkhistoria',\n      'Gör en hemsida eller annan digital presentation'\n    ]),\n    createTask('Läs litteratur från Norden.', [\n      'Läs en artikel på danska',\n      'Läs en debattartikel på norska'\n    ])\n  ]),\n  createStep(28, 'Tidningstexter', [\n    createTask('Skriva faktatext.', [\n      'Referera och använd referatmarkörer',\n      'Skriv faktatext med citat'\n    ]),\n    createTask('Läsa och förstå tidningstexter', [\n      'Olika typer av tidningstext',\n      'Läs tidningstexter'\n    ]),\n    createTask('Skriva tidningstexter och använda skrivregler', [\n      'Mera skrivregler',\n      'Skriv en artikel eller reportage',\n      'Besvara en argumenterande text'\n    ])\n  ]),\n  createStep(29, 'Samtal om texter', [\n    createTask('Presentera en text och leda ett samtal', [\n      'Att samtala',\n      'Presentera en text och led ett samtal'\n    ]),\n    createTask('Göra en textanalys.', [\n      'Textanalys'\n    ]),\n    createTask('Skriv en skönlitterär text.', [\n      'Skriv en kort berättelse'\n    ])\n  ])\n])","import moment from 'moment'\n\nexport const serialize = (courses) => {\n  return JSON.stringify(courses.map(c => ({\n      ...c,\n      steps: c.steps.map(s => ({\n        ...s,\n        selectedDate: s.selectedDate && s.selectedDate.valueOf()\n      }))\n    })\n  ))\n}\n\nexport const deserialize = (data) => {\n  return JSON.parse(data)\n    .map(c => ({\n      ...c,\n      steps: c.steps.map(s => ({\n        ...s,\n        selectedDate: s.selectedDate && moment(s.selectedDate)\n      }))\n    })\n  )\n}\n\nexport const save = (courses) => {\n  localStorage.setItem('courses', serialize(courses))\n}\n\nexport const read = () => {\n  const courses = localStorage.getItem('courses')\n  return courses && deserialize(courses)\n}","import engelska from '../seed/engelska'\nimport swedish from '../seed/swedish'\nimport _ from 'lodash'\nimport { read, save } from '../utils/persistence';\n\nconst SET_DATE = 'SET_DATE'\nconst TOGGLE_SUBTASK = 'TOGGLE_SUBTASK'\nconst COMPLETE_SUBTASK = 'COMPLETE_SUBTASK'\n\nconst updateIn = (collection, key, value, fn) => {\n  return collection.map(entity => {\n    if (entity[key] != value) {\n      return entity\n    }\n\n    return fn(entity)\n  })\n}\n\nconst updateWithIDFn = (collection, id, key, fn) => \n  updateIn(collection, 'id', id, entity => ({ ...entity, [key]: fn(entity[key]) }))\n\nconst updateWithID = (collection, id, key, value) => \n  updateIn(collection, 'id', id, entity => ({ ...entity, [key]: value }))\n\nexport const setDate = (courseID, stepID, date) => ({\n  type: SET_DATE,\n  courseID,\n  stepID,\n  date\n})\n\nexport const toggleSubtask = (courseID, stepID, taskID, subtaskID) => ({\n  type: TOGGLE_SUBTASK,\n  courseID,\n  stepID,\n  taskID,\n  subtaskID\n})\n\nexport const completeSubtask = (courseID, stepID, taskID, subtaskID) => ({\n  type: COMPLETE_SUBTASK,\n  courseID,\n  stepID,\n  taskID,\n  subtaskID\n})\n\n\nconst initalState = read() || [\n  engelska,\n  swedish\n]\n\n\nexport const courses = (state = initalState, action) => {\n  save(state)\n  const updateCourse = _.bind(updateIn, null, state, 'id', action.courseID)\n\n  switch (action.type) {\n    case SET_DATE:\n      return updateCourse(course => {\n        return {\n          ...course,\n          steps: updateWithID(\n            course.steps, action.stepID, \n            'selectedDate', action.date)\n        }\n      })\n\n    case TOGGLE_SUBTASK:\n      return updateCourse(course => ({\n        ...course,\n        steps: updateWithIDFn(course.steps, action.stepID, 'tasks', tasks => \n          updateWithIDFn(tasks, action.taskID, 'subTasks', subTasks => \n            updateWithIDFn(subTasks, action.subtaskID, 'selected', x => !x)\n          )\n        )\n      }))\n\n    case COMPLETE_SUBTASK:\n      return updateCourse(course => ({\n        ...course,\n        steps: updateWithIDFn(course.steps, action.stepID, 'tasks', tasks => \n          updateWithIDFn(tasks, action.taskID, 'subTasks', subTasks => \n            updateWithIDFn(subTasks, action.subtaskID, 'completed', x => !x)\n          )\n        )\n      }))\n\n\n\n\n    default:\n      return state\n  }\n}","import { connect } from 'react-redux'\nimport React, { Component, Fragment } from 'react'\nimport { toggleSubtask } from '../../../store/courses'\n\nimport {\n  UnorderedList,\n  ListItem,\n  Button,\n  Strong\n} from 'evergreen-ui'\n\nclass Activities extends Component {\n  selectSubtask = (taskID, subtaskID) => {\n    const {\n      courseID,\n      step,\n      toggleSubtask\n    } = this.props\n\n    toggleSubtask(courseID, step.id, taskID, subtaskID)\n  }\n\n  render() {\n    const { step } = this.props\n    const { tasks } = step\n\n    return (\n      <UnorderedList\n        display=\"inline-block\"\n        width=\"100%\"\n        maxWidth=\"400px\"\n        listStyleType=\"none\"\n        marginLeft={0}\n        padding={12}\n        textAlign=\"left\"\n      >\n        {\n          tasks.map(task => {\n            return [\n              (<ListItem key={task.id} \n              >\n                <Strong>{task.title}</Strong>\n              </ListItem>),\n              ...task.subTasks.map(st => (\n                <ListItem \n                  listStylePosition=\"inside\"\n                  key={st.id}\n                >\n                  <Button \n                    onClick={this.selectSubtask.bind(this, task.id, st.id)}\n                    width=\"100%\"\n                    appearance={st.selected ? \"primary\" : \"default\"}\n                    intent=\"success\"\n                  >\n                    {st.text}\n                  </Button>\n                </ListItem>\n              ))\n            ]\n          })\n        }\n      </UnorderedList>\n    )\n  }\n}\n\nexport default connect(null, {\n  toggleSubtask\n})(Activities)","import React, { Component } from 'react'\n\nimport { connect } from 'react-redux'\nimport { setDate } from '../../../store/courses'\nimport { Pane, Strong, Card, Heading } from 'evergreen-ui'\nimport _ from 'lodash'\nimport moment from 'moment'\n\nconst generateDates = _.memoize(() => {\n  const today = moment()\n  return _.range(0,5).map(n => today.clone().add(n + 14, 'days'))\n})\n\nclass DateSelection extends Component {\n  setDate = (date) => {\n    const { setDate, step, courseID } = this.props\n    setDate(courseID, step.id, date)\n  }\n\n  render() {\n    return (\n      <Pane \n        textAlign=\"left\" \n        padding={20}\n        borderBottom=\"1px solid #bbb\"\n      >\n        <Strong size={600} color=\"#45BBA3\" as=\"h2\">\n          Välj Redovisningstillfälle\n        </Strong>\n        <Pane \n          display=\"flex\" \n          justifyContent=\"space-around\"\n          marginTop={16}\n        >\n          {\n            generateDates().map(day => (\n              <Card \n                cursor=\"pointer\"\n                onClick={this.setDate.bind(this, day)}\n                key={day.toString()}\n                backgroundColor=\"#45BBA3\" \n                flex={1} \n                marginLeft={16} \n                display=\"flex\"\n                flexDirection=\"column\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                minWidth={80}\n                maxWidth={80}\n                maxHeight={80}\n                minHeight={80}\n                >\n                <Heading size={900} color=\"white\" as=\"h1\">{day.format('D')}</Heading> \n                <Heading color=\"white\" as=\"h2\">{day.format('MMM')}</Heading> \n              </Card>\n            ))\n          }\n        </Pane>\n      </Pane>\n    )\n  }\n}\n\nexport default connect(null, { setDate })(DateSelection)","import React, { Component } from 'react'\n\nimport { connect } from 'react-redux'\nimport { Pane, Heading, Button } from 'evergreen-ui'\nimport Header from './Header';\nimport Activities from './Activites';\nimport { Link, Redirect } from 'react-router-dom'\n\nimport _ from 'lodash'\nimport DateSelection from './DateSelection'\n\nclass Step extends Component {\n  render() {\n    const { match, courses } = this.props;\n    const { subject, step: number } = match.params\n\n    const course = _.find(courses, c => c.name === subject)\n\n    if (!course) {\n      return <Redirect to=\"/overview/\" />\n    }\n\n    const step = _.find(course.steps, s => s.number == number)\n\n    if (!step) {\n      return <Redirect to={`/overview/${subject}`} />\n    }\n\n    return (\n      <Pane width=\"100%\" textAlign=\"center\">\n        <Link to={`/overview/${subject}`}>\n          <Heading textAlign=\"left\" is=\"h1\" color=\"#45BBA3\">\n            <Heading display=\"inline\">{subject} ></Heading>\n            {' '}\n            Steg {step.number}\n          </Heading> \n        </Link>\n        <Pane elevation={1} padding={12} marginTop={12}>\n          <Header step={step} />\n          {!step.selectedDate && <DateSelection courseID={course.id} step={step} />}\n          <Activities step={step} courseID={course.id} />\n          <Pane>\n            <Link to={`/overview/${subject}`}>\n              <Button appearance=\"primary\">\n                Klar\n              </Button>\n            </Link>\n          </Pane>\n        </Pane>\n      </Pane>\n    )\n  }\n}\n\nexport default connect(state => ({\n  courses: state.courses\n}))(Step)","import { connect } from 'react-redux'\nimport React, { Component } from 'react'\n\nimport { Switch, Route } from 'react-router-dom'\nimport { Pane } from 'evergreen-ui'\nimport Semester from './Semester';\nimport Steps from './Steps';\nimport Step from './Step';\n\nconst subjects = [\n  {\n    name: \"Engelska\",\n    steps: [\n      { number: 18, progress: 100 },\n      { number: 19, progress: 79 },\n      { number: 20, progress: 0 }\n    ]\n  },\n  {\n    name: \"Franska\", color: \"#64CF3F\", steps: [\n      { number: 15, progress: 100 },\n      { number: 16, progress: 100 },\n      { number: 17, progress: 80 },\n      { number: 18, progress: 0 }\n    ]\n  }\n]\n\nclass Overview extends Component {\n  render() {\n    return (\n      <Pane\n        padding={16}\n        marginBottom={32}\n        backgroundColor=\"#F8F8F8\"\n        display=\"flex\"\n        alignItems=\"center\"\n      >\n        <Switch>\n          <Route path=\"/overview/:subject/:step\" component={Step} />\n          <Route path=\"/overview/:subject\" component={Steps} />\n          <Route component={Semester} />\n        </Switch>\n      </Pane>\n    );\n  }\n}\n\nexport default Overview\n","import React, { Component } from 'react'\nimport styles from './News'\n\nexport default class News extends Component {\n  render() {\n    return <h1>News</h1>\n  }\n}","import React, { Component } from 'react'\nimport _ from 'lodash'\nimport { connect } from 'react-redux'\n\nimport { getCourseProgress, getTotalProgress } from '../../utils/progress'\nimport { Pane, IconButton } from 'evergreen-ui'\nimport Progress from '../Common/Progress/Progress';\n\nclass Header extends Component {\n  render() {\n    const { courses } = this.props\n    const totalProgress = getTotalProgress(courses)\n\n    return (\n      <Pane \n        display=\"flex\" \n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        <Pane width=\"50%\">\n          <Progress percent={Math.round(totalProgress)} /> \n        </Pane>\n        <Pane>Vecka 39</Pane>\n        <Pane display=\"flex\">\n          <IconButton icon=\"chevron-left\" />\n          <IconButton icon=\"chevron-right\" />\n        </Pane>\n      </Pane>\n    )\n  }\n}\n\nexport default connect(state => ({\n  courses: state.courses\n}))(Header)","import React, { Component } from 'react'\n\nimport { Pane, Avatar } from 'evergreen-ui'\n\nconst range = (n) => [...Array(n).keys()]\n\nexport default class Dots extends Component {\n  render() {\n    const { n, progress } = this.props\n\n    const remaining = n - progress\n\n    return (\n      <Pane \n        position=\"relative\"\n      >\n        <Pane \n          marginLeft={10}\n          marginRight={10}\n          position=\"relative\" \n          top={14} \n          backgroundColor=\"#E4E7EB\"\n          opacity=\"0.3\"\n          borderBottom=\"4px solid gray\" \n        />\n        <Pane>\n        {range(progress).map((_, i) => (\n          <Avatar \n            key={i} \n            marginLeft={4} \n            isSolid \n            name=\" \"\n            backgroundColor=\"#45BBA3\" \n            />\n        ))}\n        {range(remaining).map((_, i) => (\n          <Avatar key={i} marginLeft={4} name=\" \" color=\"neutral\" />\n        ))}\n        </Pane>\n      </Pane>\n    )\n  }\n}","import React, { Component } from 'react'\nimport { getStepProgress, getStatsForTasks } from '../../utils/progress'\nimport { completeSubtask } from '../../store/courses'\nimport { connect } from 'react-redux'\nimport { \n  subtaskIsActive, stepIsActive \n} from '../../utils/active'\nimport _ from 'lodash'\n\nimport './Subject.css'\n\n\nimport { \n  Pill, Card, Pane, IconButton, Strong,\n  UnorderedList, ListItem\n} from 'evergreen-ui'\nimport Dots from './Dots';\n\nclass Subject extends Component {\n  state = {\n    showContent: false\n  }\n\n  toggleShowContent = () => {\n    this.setState({\n      showContent: !this.state.showContent\n    })\n  }\n\n  completeSubtask = (stepID, taskID, subtaskID) => {\n    const { course, completeSubtask } = this.props\n    completeSubtask(course.id, stepID, taskID, subtaskID)\n  }\n\n  render() {\n    const { course } = this.props\n    const { name, steps } = course\n\n    const stats = \n      _.flatten(_.map(steps.filter(stepIsActive), 'tasks'))\n        .map(task => getStatsForTasks(task))\n        .reduce((c, { completed, total }) => ({\n          completed: c.completed + completed,\n          total: c.total + total\n        }), { completed: 0, total: 0 })\n\n    return (\n      <Card\n        backgroundColor=\"#F1F5F4\"\n        marginBottom={16}\n      >\n        <Pane\n          onClick={this.toggleShowContent}\n          display=\"flex\"\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n          padding={8}\n          backgroundColor=\"#EEEEEE\"\n          color=\"#88D0C1\"\n          borderBottom=\"1px solid rgb(160, 160, 160)\"\n        >\n        <Pane display=\"flex\" alignItems=\"center\">\n          <strong>{name.toUpperCase()}</strong>\n          <Dots n={stats.total} progress={stats.completed} />\n        </Pane>\n        <IconButton \n          appearance=\"minimal\" \n          icon={this.state.showContent ? \"chevron-up\" : \"chevron-down\"}\n          />\n        </Pane>\n        {\n          this.state.showContent && (\n            <Pane>\n              {\n                steps.filter(stepIsActive).map(step => {\n                  return (\n                    <Pane key={step.id} padding={8}>\n                      <Strong>\n                        <Pill color=\"green\">{step.number}</Pill> {step.title}\n                      </Strong>\n                      <UnorderedList\n                        icon=\"circle\"\n                      >\n                        {\n                          _.flatten(_.map(step.tasks, task => {\n                            return task.subTasks\n                              .filter(subtaskIsActive)\n                              .map(st => {\n                                let props = {}\n                                if (st.completed) {\n                                  props.icon = 'full-circle'\n                                  props.iconColor = '#45BBA3'\n                                }\n\n                                return (\n                                  <ListItem \n                                    {...props}\n                                    key={st.id}\n                                    cursor=\"pointer\"\n                                    onClick={this.completeSubtask.bind(this, step.id, task.id, st.id)}\n                                  >\n                                    {st.text}\n                                  </ListItem>\n                                )\n                              })\n                          })\n                          )}\n                      </UnorderedList>\n                    </Pane>\n                  )\n                })\n              }\n            </Pane>\n          )\n        }\n      </Card>\n    )\n  }\n}\n\nexport default connect(null, {\n  completeSubtask\n})(Subject)","import React, { Component } from 'react'\nimport { \n  courseIsActive\n} from '../../utils/active'\n\nimport { connect } from 'react-redux'\nimport { Card, Pane, Text } from 'evergreen-ui'\nimport Header from './Header';\nimport Subject from './Subject';\n\nclass Menu extends Component {\n  render() {\n    const { courses } = this.props\n\n    const activeCourses = courses.filter(courseIsActive)\n\n    return (\n      <Card \n        elevation={1}\n        backgroundColor=\"#BED3CE\"\n        padding={16}\n      >\n        <Header />\n        <Pane marginTop={12}>\n          {\n            activeCourses.length === 0 ?\n            <Text>Inga Aktiva Kurser</Text>\n            :\n            activeCourses.map(course => (\n              <Subject key={course.id} course={course} />\n            ))\n          }\n        </Pane>\n      </Card>\n    )\n  }\n}\n\nexport default connect(state => ({\n  courses: state.courses\n}))(Menu)","import React, { Component } from 'react';\nimport './App.css';\n\nimport moment from 'moment'\n\nimport { Pane } from 'evergreen-ui'\nimport { Redirect, Route, Switch } from 'react-router-dom'\nimport Header from './components/Header/Header';\nimport Overview from './components/Overview/Overview';\nimport News from './components/News/News'\nimport Menu from './components/Menu/Menu';\n\nmoment.locale('sv')\n\nclass App extends Component {\n  render() {\n    return (\n      <Pane \n        display=\"flex\" \n        boxSizing=\"border-box\"\n        backgroundColor=\"white\"\n        minHeight=\"100vh\"\n        elevation={1}\n      >\n        <Pane \n          width=\"60%\" \n          marginLeft={16}             \n          marginTop={16}\n        >\n          <Header />\n          <Pane \n            elevation={3}\n            marginTop={16}\n          >\n            <Switch>\n              <Route path=\"/overview\" component={Overview} />\n              <Redirect to=\"/overview\" />\n            </Switch>\n          </Pane>\n        </Pane>\n        <Pane width=\"40%\" margin={16}>\n          <Menu />\n        </Pane>\n      </Pane>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore } from 'redux'\nimport rootReducer from './rootReducer';\n\nexport default (initialState) => {\n  return createStore(rootReducer, initialState)\n}","import { combineReducers } from 'redux'\nimport { courses } from './courses'\n\nexport default combineReducers({\n  courses\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\nimport { Provider } from 'react-redux'\nimport createStore from './store/store'\n\nconst store = createStore({})\n\nReactDOM.render(\n  (\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  ), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}